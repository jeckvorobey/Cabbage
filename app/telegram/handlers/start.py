"""–•–µ–Ω–¥–ª–µ—Ä /start: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
from __future__ import annotations

import logging

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

from app.core.db import get_session
from app.services.user_service import UserService
from app.core.config import settings

router = Router()
logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tg_user = message.from_user
    if tg_user is None:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /start –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    tg_id = tg_user.id
    full_name = tg_user.full_name
    username = tg_user.username
    first_name = tg_user.first_name
    last_name = tg_user.last_name
    is_bot = tg_user.is_bot
    language_code = getattr(tg_user, "language_code", None)
    is_premium = getattr(tg_user, "is_premium", None)

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} (@{username})")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
    try:
        import json
        from pathlib import Path

        dump_dir = Path(__file__).parent.parent / "user_data"
        dump_dir.mkdir(parents=True, exist_ok=True)
        user_json_path = dump_dir / f"{tg_id}.json"

        # aiogram v3: —É –æ–±—ä–µ–∫—Ç–∞ User –µ—Å—Ç—å –º–µ—Ç–æ–¥ model_dump()
        user_payload = tg_user.model_dump() if hasattr(tg_user, "model_dump") else {
            "id": tg_id,
            "full_name": full_name,
            "username": username,
            "first_name": first_name,
            "last_name": last_name,
            "is_bot": is_bot,
            "language_code": language_code,
            "is_premium": is_premium,
        }
        user_json_path.write_text(json.dumps(user_payload, ensure_ascii=False, indent=2), encoding="utf-8")
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {user_json_path}")
    except Exception as e:
        # –ù–µ –ø–∞–¥–∞–µ–º –Ω–∞ –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}", exc_info=True)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î
    try:
        async for session in get_session():
            service = UserService(session)
            await service.get_or_create_by_telegram(
                telegram_id=tg_id,
                name=full_name,
                username=username,
                first_name=first_name,
                last_name=last_name,
                is_bot=is_bot,
                language_code=language_code,
                is_premium=is_premium,
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î")
            break
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} –≤ –ë–î: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=settings.frontend_webapp_url or ""))]
    ])
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–≤–æ—â–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω!\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ –ú–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        reply_markup=kb,
    )
    logger.debug(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}")
